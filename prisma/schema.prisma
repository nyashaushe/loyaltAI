// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String      @id @default(cuid())
  slug      String      @unique
  name      String
  users     User[]
  geofences Geofence[]
  programs  Program[]
  rewards   Reward[]
  createdAt DateTime    @default(now())
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  name         String
  role         String
  passwordHash String?
  picture      String?
  tenantId     String
  tenant       Tenant    @relation(fields: [tenantId], references: [id])
  transactions Transaction[]
  createdAt    DateTime  @default(now())
}

model Geofence {
  id           String   @id @default(cuid())
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  name         String
  latitude     Float
  longitude    Float
  radiusMeters Int
  createdAt    DateTime @default(now())
}

model Program {
  id                  String   @id @default(cuid())
  tenantId            String
  tenant              Tenant   @relation(fields: [tenantId], references: [id])
  name                String
  pointsPerDollar     Int      @default(2)
  birthdayBonus       Int      @default(250)
  checkInBonusPoints  Int      @default(50)
  checkInRadiusMeters Int      @default(150)
  createdAt           DateTime @default(now())
}

model Reward {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  name        String
  description String
  pointsCost  Int
  category    String
  isActive    Boolean  @default(true)
  usageLimit  Int?
  usageCount  Int      @default(0)
  expiryDate  DateTime?
  createdAt   DateTime @default(now())
}

model Transaction {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  tenantId       String
  amount         Float
  pointsEarned   Int
  pointsRedeemed Int      @default(0)
  location       String
  timestamp      DateTime @default(now())
  paymentMethod  String
}

model Testing {
  id        String   @id @default(cuid())
  name      String?
  createdAt DateTime @default(now())
}
